#include "imgui_behaviour.hpp"

#include <coffee/engine.hpp>

#include <fstream>

/*

//ImGui::SetNextWindowSize({ static_cast<float>(engine.getFramebufferWidth()), static_cast<float>(engine.getFramebufferHeight()) });
//ImGui::SetNextWindowPos({ 0.0f, 0.0f });

//ImGui::Begin("Splitter", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove);

//static float windowWidth = 200.0f;
//static float windowHeight = 300.0f;
//ImGuiIO& io = ImGui::GetIO();

//ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, { 0.0f, 0.0f });
//ImGui::BeginChild("Child1", { windowWidth, windowHeight }, true);
//ImGui::EndChild();

//ImGui::SameLine();
//ImGui::InvisibleButton("VerticalSplitter", { 8.0f, windowHeight });
//if (ImGui::IsItemActive() && windowWidth > std::abs(io.MouseDelta.x)) {
//    windowWidth += io.MouseDelta.x;
//}

//ImGui::SameLine();
//ImGui::BeginChild("Child2", { 0.0f, windowHeight }, true);
//{
//    ImVec2 viewportPanelSize = ImGui::GetContentRegionAvail();
//    ImGui::Image(offscreenRenderer.getImageDescriptor(frameIndex), viewportPanelSize);
//}
//ImGui::EndChild();

//ImGui::InvisibleButton("HorizontalSplitter", { -1.0f, 8.0f });
//if (ImGui::IsItemActive() && windowHeight > std::abs(io.MouseDelta.y)) {
//    windowHeight += io.MouseDelta.y;
//}

//ImGui::BeginChild("Child3", { 0.0f, 0.0f }, true);
//ImGui::EndChild();

//ImGui::PopStyleVar();

//ImGui::End();

*/

namespace game {

    static float slider = 60.0f;
    static ImVec4 clearColor = { 0.45f, 0.45f, 0.02f, 1.0f };

    std::vector<coffee::InputElement> getElementDescriptions() {
        std::vector<coffee::InputElement> elements {};

        elements.push_back({ "", 0U, 0U, coffee::Format::R32G32SFloat, offsetof(ImDrawVert, pos) });
        elements.push_back({ "", 0U, 1U, coffee::Format::R32G32SFloat, offsetof(ImDrawVert, uv) });
        elements.push_back({ "", 0U, 2U, coffee::Format::R8G8B8A8UNorm, offsetof(ImDrawVert, col) });

        return elements;
    }

    // Modified ImGui shaders so they will work with Coffee engine

    /*
        #version 450 core
        layout(location = 0) in vec2 aPos;
        layout(location = 1) in vec2 aUV;
        layout(location = 2) in vec4 aColor;
        layout(push_constant) uniform uPushConstant { vec2 uScale; vec2 uTranslate; } pc;

        out gl_PerVertex { vec4 gl_Position; };
        layout(location = 0) out struct { vec4 Color; vec2 UV; } Out;

        void main()
        {
            Out.Color = aColor;
            Out.UV = aUV;
            gl_Position = vec4(aPos * pc.uScale + pc.uTranslate, 0, 1);
        }
    */

    static std::vector<uint8_t> imguiVertexShader = {
        0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0x2e, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
        0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xc2, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x6c, 0x6f,
        0x72, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x55, 0x56, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4f, 0x75, 0x74, 0x00,
        0x05, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00,
        0x05, 0x00, 0x03, 0x00, 0x15, 0x00, 0x00, 0x00, 0x61, 0x55, 0x56, 0x00, 0x05, 0x00, 0x06, 0x00,
        0x19, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x50, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x05, 0x00, 0x03, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0x61, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x75, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x05, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x53, 0x63, 0x61,
        0x6c, 0x65, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x75, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x70, 0x63, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
        0x19, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x00,
        0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x00, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x1f, 0x00, 0x00, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1f, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x21, 0x00, 0x00, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x0b, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x0b, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x18, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x24, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
        0x21, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
        0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
        0x81, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x26, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
        0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
        0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x2d, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
        0x2d, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
    };

    /*
        #version 450 core
        layout(location = 0) out vec4 fColor;
        layout(set=0, binding=0) uniform sampler2D sTexture;
        layout(location = 0) in struct { vec4 Color; vec2 UV; } In;

        vec4 correctColor(vec4 color)
        {
            color.r = pow(color.r, 2.2);
            color.g = pow(color.g, 2.2);
            color.b = pow(color.b, 2.2);
            return color;
        }

        void main()
        {
            fColor = correctColor(In.Color) * texture(sTexture, In.UV.st);
        }
    */

    static std::vector<uint8_t> imguiFragmentShader = {
        0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x3a, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
        0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
        0xc2, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
        0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x63, 0x6f, 0x72, 0x72,
        0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x66, 0x34, 0x3b, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x66, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00,
        0x05, 0x00, 0x03, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x04, 0x00, 0x25, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x56, 0x00, 0x00,
        0x05, 0x00, 0x03, 0x00, 0x27, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
        0x2a, 0x00, 0x00, 0x00, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
        0x32, 0x00, 0x00, 0x00, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x21, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xcd, 0xcc, 0x0c, 0x40,
        0x2b, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x3b, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x04, 0x00, 0x25, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x26, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
        0x3b, 0x00, 0x04, 0x00, 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x15, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x19, 0x00, 0x09, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
        0x3b, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2b, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x04, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
        0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
        0x2b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
        0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x03, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x39, 0x00, 0x05, 0x00,
        0x07, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
        0x3d, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
        0x41, 0x00, 0x05, 0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00,
        0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00,
        0x36, 0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
        0x33, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x39, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
        0x23, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00,
        0x36, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
        0xf8, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
        0x14, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x19, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
        0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0f, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
        0x1e, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x1f, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x02, 0x00, 0x1f, 0x00, 0x00, 0x00,
        0x38, 0x00, 0x01, 0x00
    };

    ImGuiKey keyToImGui(coffee::Keys key) {
        switch (key) {
            case coffee::Keys::Tab:             return ImGuiKey_Tab;
            case coffee::Keys::Left:            return ImGuiKey_LeftArrow;
            case coffee::Keys::Right:           return ImGuiKey_RightArrow;
            case coffee::Keys::Up:              return ImGuiKey_UpArrow;
            case coffee::Keys::Down:            return ImGuiKey_DownArrow;
            case coffee::Keys::PageUp:          return ImGuiKey_PageUp;
            case coffee::Keys::PageDown:        return ImGuiKey_PageDown;
            case coffee::Keys::Home:            return ImGuiKey_Home;
            case coffee::Keys::End:             return ImGuiKey_End;
            case coffee::Keys::Insert:          return ImGuiKey_Insert;
            case coffee::Keys::Delete:          return ImGuiKey_Delete;
            case coffee::Keys::Backspace:       return ImGuiKey_Backspace;
            case coffee::Keys::Space:           return ImGuiKey_Space;
            case coffee::Keys::Enter:           return ImGuiKey_Enter;
            case coffee::Keys::Escape:          return ImGuiKey_Escape;
            case coffee::Keys::Apostrophe:      return ImGuiKey_Apostrophe;
            case coffee::Keys::Comma:           return ImGuiKey_Comma;
            case coffee::Keys::Minus:           return ImGuiKey_Minus;
            case coffee::Keys::Period:          return ImGuiKey_Period;
            case coffee::Keys::Slash:           return ImGuiKey_Slash;
            case coffee::Keys::Semicolon:       return ImGuiKey_Semicolon;
            case coffee::Keys::Equal:           return ImGuiKey_Equal;
            case coffee::Keys::LeftBracket:     return ImGuiKey_LeftBracket;
            case coffee::Keys::Backslash:       return ImGuiKey_Backslash;
            case coffee::Keys::RightBracket:    return ImGuiKey_RightBracket;
            case coffee::Keys::GraveAccent:     return ImGuiKey_GraveAccent;
            case coffee::Keys::CapsLock:        return ImGuiKey_CapsLock;
            case coffee::Keys::ScrollLock:      return ImGuiKey_ScrollLock;
            case coffee::Keys::NumLock:         return ImGuiKey_NumLock;
            case coffee::Keys::PrintScreen:     return ImGuiKey_PrintScreen;
            case coffee::Keys::Pause:           return ImGuiKey_Pause;
            case coffee::Keys::KP0:             return ImGuiKey_Keypad0;
            case coffee::Keys::KP1:             return ImGuiKey_Keypad1;
            case coffee::Keys::KP2:             return ImGuiKey_Keypad2;
            case coffee::Keys::KP3:             return ImGuiKey_Keypad3;
            case coffee::Keys::KP4:             return ImGuiKey_Keypad4;
            case coffee::Keys::KP5:             return ImGuiKey_Keypad5;
            case coffee::Keys::KP6:             return ImGuiKey_Keypad6;
            case coffee::Keys::KP7:             return ImGuiKey_Keypad7;
            case coffee::Keys::KP8:             return ImGuiKey_Keypad8;
            case coffee::Keys::KP9:             return ImGuiKey_Keypad9;
            case coffee::Keys::KPDecimal:       return ImGuiKey_KeypadDecimal;
            case coffee::Keys::KPDivide:        return ImGuiKey_KeypadDivide;
            case coffee::Keys::KPMultiply:      return ImGuiKey_KeypadMultiply;
            case coffee::Keys::KPSubtract:      return ImGuiKey_KeypadSubtract;
            case coffee::Keys::KPAdd:           return ImGuiKey_KeypadAdd;
            case coffee::Keys::KPEnter:         return ImGuiKey_KeypadEnter;
            case coffee::Keys::KPEqual:         return ImGuiKey_KeypadEqual;
            case coffee::Keys::LeftShift:       return ImGuiKey_LeftShift;
            case coffee::Keys::LeftControl:     return ImGuiKey_LeftCtrl;
            case coffee::Keys::LeftAlt:         return ImGuiKey_LeftAlt;
            case coffee::Keys::LeftSuper:       return ImGuiKey_LeftSuper;
            case coffee::Keys::RightShift:      return ImGuiKey_RightShift;
            case coffee::Keys::RightControl:    return ImGuiKey_RightCtrl;
            case coffee::Keys::RightAlt:        return ImGuiKey_RightAlt;
            case coffee::Keys::RightSuper:      return ImGuiKey_RightSuper;
            case coffee::Keys::Menu:            return ImGuiKey_Menu;
            case coffee::Keys::D0:              return ImGuiKey_0;
            case coffee::Keys::D1:              return ImGuiKey_1;
            case coffee::Keys::D2:              return ImGuiKey_2;
            case coffee::Keys::D3:              return ImGuiKey_3;
            case coffee::Keys::D4:              return ImGuiKey_4;
            case coffee::Keys::D5:              return ImGuiKey_5;
            case coffee::Keys::D6:              return ImGuiKey_6;
            case coffee::Keys::D7:              return ImGuiKey_7;
            case coffee::Keys::D8:              return ImGuiKey_8;
            case coffee::Keys::D9:              return ImGuiKey_9;
            case coffee::Keys::A:               return ImGuiKey_A;
            case coffee::Keys::B:               return ImGuiKey_B;
            case coffee::Keys::C:               return ImGuiKey_C;
            case coffee::Keys::D:               return ImGuiKey_D;
            case coffee::Keys::E:               return ImGuiKey_E;
            case coffee::Keys::F:               return ImGuiKey_F;
            case coffee::Keys::G:               return ImGuiKey_G;
            case coffee::Keys::H:               return ImGuiKey_H;
            case coffee::Keys::I:               return ImGuiKey_I;
            case coffee::Keys::J:               return ImGuiKey_J;
            case coffee::Keys::K:               return ImGuiKey_K;
            case coffee::Keys::L:               return ImGuiKey_L;
            case coffee::Keys::M:               return ImGuiKey_M;
            case coffee::Keys::N:               return ImGuiKey_N;
            case coffee::Keys::O:               return ImGuiKey_O;
            case coffee::Keys::P:               return ImGuiKey_P;
            case coffee::Keys::Q:               return ImGuiKey_Q;
            case coffee::Keys::R:               return ImGuiKey_R;
            case coffee::Keys::S:               return ImGuiKey_S;
            case coffee::Keys::T:               return ImGuiKey_T;
            case coffee::Keys::U:               return ImGuiKey_U;
            case coffee::Keys::V:               return ImGuiKey_V;
            case coffee::Keys::W:               return ImGuiKey_W;
            case coffee::Keys::X:               return ImGuiKey_X;
            case coffee::Keys::Y:               return ImGuiKey_Y;
            case coffee::Keys::Z:               return ImGuiKey_Z;
            case coffee::Keys::F1:              return ImGuiKey_F1;
            case coffee::Keys::F2:              return ImGuiKey_F2;
            case coffee::Keys::F3:              return ImGuiKey_F3;
            case coffee::Keys::F4:              return ImGuiKey_F4;
            case coffee::Keys::F5:              return ImGuiKey_F5;
            case coffee::Keys::F6:              return ImGuiKey_F6;
            case coffee::Keys::F7:              return ImGuiKey_F7;
            case coffee::Keys::F8:              return ImGuiKey_F8;
            case coffee::Keys::F9:              return ImGuiKey_F9;
            case coffee::Keys::F10:             return ImGuiKey_F10;
            case coffee::Keys::F11:             return ImGuiKey_F11;
            case coffee::Keys::F12:             return ImGuiKey_F12;
            default:                            return ImGuiKey_None;
        }
    }

    ImGuiSystem::ImGuiSystem(coffee::Engine& engine) : engine { engine } {
        ImGui::CreateContext();
        ImGui::StyleColorsDark();

        createFonts();
        createDescriptors();
        createRenderPass();
        createPipeline();

        engine.addWindowResizeCallback("imgui_resize", [this](const coffee::ResizeEvent&) {
            createFramebuffers();
        });

        engine.addPresentModeCallback("imgui_present_mode", [this](const coffee::PresentModeEvent&) {
            createFramebuffers();
        });

        createFramebuffers();

        const size_t presentImagesSize = engine.getPresentImages().size();
        vertexBuffers.resize(presentImagesSize);
        indexBuffers.resize(presentImagesSize);
        
        ImGuiIO& io = ImGui::GetIO();

        ImGuiStyle& style = ImGui::GetStyle();
        style.WindowRounding = 0.0f;

        io.DisplaySize = ImVec2 { static_cast<float>(engine.getWindowWidth()), static_cast<float>(engine.getWindowHeight()) };

        engine.addWindowFocusCallback("imgui_focus", [](const coffee::WindowFocusEvent& e) {
            ImGuiIO& io = ImGui::GetIO();
            io.AddFocusEvent(e.isFocusGained());
        });

        engine.addWindowEnterCallback("imgui_enter", [&](const coffee::WindowEnterEvent& e) {
            if (engine.getCursorState() == coffee::CursorState::Disabled) {
                return;
            }

            ImGuiIO& io = ImGui::GetIO();

            if (e.entered()) {
                io.AddMousePosEvent(lastMousePos.x, lastMousePos.y);
                return;
            }

            lastMousePos = io.MousePos;
            io.AddMousePosEvent(-FLT_MAX, -FLT_MAX);
        });

        engine.addMouseClickCallback("imgui_click", [&](const coffee::MouseClickEvent& e) {
            ImGuiIO& io = ImGui::GetIO();

            io.AddKeyEvent(ImGuiMod_Ctrl, e.withControl());
            io.AddKeyEvent(ImGuiMod_Shift, e.withShift());
            io.AddKeyEvent(ImGuiMod_Alt, e.withAlt());
            io.AddKeyEvent(ImGuiMod_Super, e.withSuper());

            uint8_t button = static_cast<uint8_t>(e.getButton());
            if (button >= 0 && button < ImGuiMouseButton_COUNT) {
                io.AddMouseButtonEvent(button, e.getState() == coffee::State::Press);
            }
        });

        engine.addMousePositionCallback("imgui_cursor_pos", [&](const coffee::MouseMoveEvent& e) {
            ImGuiIO& io = ImGui::GetIO();
            io.AddMousePosEvent(e.getX(), e.getY());
            lastMousePos = { e.getX(), e.getY() };
        });

        engine.addMouseWheelCallback("imgui_wheel", [&](const coffee::MouseWheelEvent& e) {
            ImGuiIO& io = ImGui::GetIO();
            io.AddMouseWheelEvent(e.getX(), e.getY());
        });

        engine.addKeyCallback("imgui_key", [&](const coffee::KeyEvent& e) {
            if (e.getState() != coffee::State::Press && e.getState() != coffee::State::Release) {
                return;
            }

            io.AddKeyEvent(ImGuiMod_Ctrl, e.withControl());
            io.AddKeyEvent(ImGuiMod_Shift, e.withShift());
            io.AddKeyEvent(ImGuiMod_Alt, e.withAlt());
            io.AddKeyEvent(ImGuiMod_Super, e.withSuper());

            ImGuiKey key = keyToImGui(e.getKey());
            io.AddKeyEvent(key, e.getState() == coffee::State::Press);
            io.SetKeyEventNativeData(key, static_cast<int>(e.getKey()), static_cast<int>(e.getScancode()));
        });

        engine.addCharCallback("imgui_char", [](char32_t ch) {
            ImGuiIO& io = ImGui::GetIO();
            io.AddInputCharacter(ch);
        });
    }

    ImGuiSystem::~ImGuiSystem() {
        engine.waitDeviceIdle();

        engine.removeCharCallback("imgui_char");
        engine.removeKeyCallback("imgui_key");
        engine.removeMouseWheelCallback("imgui_wheel");
        engine.removeMousePositionCallback("imgui_cursor_pos");
        engine.removeMouseClickCallback("imgui_click");
        engine.removeWindowEnterCallback("imgui_enter");
        engine.removeWindowFocusCallback("imgui_focus");

        ImGui::DestroyContext();
    }

    void ImGuiSystem::update() {
        ImGuiIO& io = ImGui::GetIO();

        io.DisplaySize = ImVec2 { static_cast<float>(engine.getWindowWidth()), static_cast<float>(engine.getWindowHeight()) };
        if (engine.getWindowWidth() > 0 && engine.getWindowHeight() > 0) {
            io.DisplayFramebufferScale = ImVec2 {
                static_cast<float>(engine.getWindowWidth() / engine.getFramebufferWidth()),
                static_cast<float>(engine.getWindowHeight() / engine.getFramebufferHeight())
            };
        }

        io.DeltaTime = engine.getDeltaTime();
        
        updateMouse();
        updateCursor();

        prepareImGui();
    }

    void ImGuiSystem::render(const coffee::CommandBuffer& commandBuffer) {
        ImDrawData* data = ImGui::GetDrawData();

        if (data == nullptr) {
            return;
        }

        const uint32_t frameIndex = engine.getCurrentImageIndex();
        float framebufferWidth = data->DisplaySize.x * data->FramebufferScale.x;
        float framebufferHeight = data->DisplaySize.y * data->FramebufferScale.y;

        if (framebufferWidth <= 0.0f || framebufferHeight <= 0.0f) {
            return;
        }

        commandBuffer->beginRenderPass(
            renderPass, framebuffers[engine.getCurrentImageIndex()], { engine.getFramebufferWidth(), engine.getFramebufferHeight() });

        if (data->TotalVtxCount > 0) {
            size_t vertexSize = data->TotalVtxCount * sizeof(ImDrawVert);
            size_t indexSize = data->TotalIdxCount * sizeof(ImDrawIdx);

            coffee::Buffer& vertexBuffer = vertexBuffers[frameIndex];
            coffee::Buffer& indexBuffer = indexBuffers[frameIndex];

            if (vertexBuffer == nullptr || vertexBuffer->getTotalSize() < vertexSize) {
                coffee::BufferConfiguration configuration {};
                configuration.usage = coffee::BufferUsage::Vertex;
                configuration.properties = coffee::MemoryProperty::HostVisible;
                configuration.instanceCount = data->TotalVtxCount;
                configuration.instanceSize = sizeof(ImDrawVert);
                vertexBuffer = engine.createBuffer(configuration);
            }

            if (indexBuffer == nullptr || indexBuffer->getTotalSize() < indexSize) {
                coffee::BufferConfiguration configuration {};
                configuration.usage = coffee::BufferUsage::Index;
                configuration.properties = coffee::MemoryProperty::HostVisible;
                configuration.instanceCount = data->TotalIdxCount;
                configuration.instanceSize = sizeof(ImDrawIdx);
                indexBuffer = engine.createBuffer(configuration);
            }

            size_t vertexOffset = 0;
            size_t indexOffset = 0;

            for (size_t i = 0; i < data->CmdListsCount; i++) {
                const ImDrawList* list = data->CmdLists[i];

                vertexBuffer->write(list->VtxBuffer.Data, list->VtxBuffer.Size * sizeof(ImDrawVert), vertexOffset);
                indexBuffer->write(list->IdxBuffer.Data, list->IdxBuffer.Size * sizeof(ImDrawIdx), indexOffset);

                vertexOffset += list->VtxBuffer.Size * sizeof(ImDrawVert);
                indexOffset += list->IdxBuffer.Size * sizeof(ImDrawIdx);
            }

            vertexBuffer->flush();
            indexBuffer->flush();

            commandBuffer->bindVertexBuffer(vertexBuffer);
            commandBuffer->bindIndexBuffer(indexBuffer);
        }

        commandBuffer->bindPipeline(pipeline);
        commandBuffer->bindDescriptorSet(descriptorSet);

        commandBuffer->setViewport({ static_cast<uint32_t>(framebufferWidth), static_cast<uint32_t>(framebufferHeight) });

        constants.scale.x = 2.0f / data->DisplaySize.x;
        constants.scale.y = 2.0f / data->DisplaySize.y;
        constants.translate.x = -1.0f - data->DisplayPos.x * constants.scale.x;
        constants.translate.y = -1.0f - data->DisplayPos.y * constants.scale.y;
        commandBuffer->pushConstants(coffee::ShaderStage::Vertex, constants);

        ImVec2 clipOff = data->DisplayPos;
        ImVec2 clipScale = data->FramebufferScale;

        uint32_t vertexOffset = 0;
        uint32_t indexOffset = 0;

        for (int i = 0; i < data->CmdListsCount; i++) {
            const ImDrawList* list = data->CmdLists[i];

            for (int j = 0; j < list->CmdBuffer.Size; j++) {
                const ImDrawCmd& command = list->CmdBuffer[j];

                if (command.UserCallback != nullptr) {
                    command.UserCallback(list, &command);
                    continue;
                }

                ImVec2 clipMin { (command.ClipRect.x - clipOff.x) * clipScale.x, (command.ClipRect.y - clipOff.y) * clipScale.y };
                ImVec2 clipMax { (command.ClipRect.z - clipOff.x) * clipScale.x, (command.ClipRect.w - clipOff.y) * clipScale.y };

                clipMin.x = std::max(clipMin.x, 0.0f);
                clipMin.y = std::max(clipMin.y, 0.0f);

                clipMax.x = std::min(clipMax.x, framebufferWidth);
                clipMax.y = std::min(clipMax.y, framebufferHeight);

                if (clipMax.x <= clipMin.x || clipMax.y <= clipMin.y) {
                    continue;
                }

                if (command.TextureId != nullptr) {
                    commandBuffer->bindDescriptorSet(*reinterpret_cast<coffee::DescriptorSet*>(command.TextureId));
                }

                commandBuffer->setScissor(
                    { static_cast<uint32_t>(clipMax.x - clipMin.x), static_cast<uint32_t>(clipMax.y - clipMin.y) },
                    { static_cast<int32_t>(clipMin.x), static_cast<int32_t>(clipMin.y) });
                commandBuffer->drawIndexed(command.ElemCount, 1U, indexOffset + command.IdxOffset, vertexOffset + command.VtxOffset);

                // We must restore default descriptor set
                if (command.TextureId != nullptr) {
                    commandBuffer->bindDescriptorSet(descriptorSet);
                }
            }

            vertexOffset += list->VtxBuffer.Size;
            indexOffset += list->IdxBuffer.Size;
        }

        commandBuffer->endRenderPass();
    }

    void ImGuiSystem::createFonts() {
        constexpr size_t bytesPerPixel = 4;

        ImGuiIO& io = ImGui::GetIO();
        uint8_t* fontPixels = nullptr;
        int width {}, height {};

        io.Fonts->AddFontDefault();
        io.Fonts->Build();
        io.Fonts->GetTexDataAsRGBA32(&fontPixels, &width, &height);

        coffee::SamplerConfiguration samplerConfiguration {};
        samplerConfiguration.magFilter = coffee::SamplerFilter::Linear;
        samplerConfiguration.minFilter = coffee::SamplerFilter::Linear;
        samplerConfiguration.mipmapMode = coffee::SamplerFilter::Linear;
        samplerConfiguration.borderColor = coffee::BorderColor::OpaqueBlack;
        samplerConfiguration.anisotropyEnable = true;
        samplerConfiguration.maxAnisotropy = 1U;
        samplerConfiguration.minLod = -1000.0f;
        samplerConfiguration.maxLod = 1000.0f;
        fontsSampler = engine.createSampler(samplerConfiguration);

        coffee::ImageConfiguration imageConfiguration {};
        imageConfiguration.type = coffee::ImageType::TwoDimensional;
        imageConfiguration.format = coffee::Format::R8G8B8A8UNorm;
        imageConfiguration.width = width;
        imageConfiguration.height = height;
        imageConfiguration.tiling = coffee::ImageTiling::Optimal;
        imageConfiguration.usage = coffee::ImageUsage::TransferDestination | coffee::ImageUsage::Sampled;
        imageConfiguration.initialState = coffee::ResourceState::Undefined;
        imageConfiguration.viewType = coffee::ImageViewType::TwoDimensional;
        imageConfiguration.aspects = coffee::ImageAspect::Color;
        fonts = engine.createImage(imageConfiguration);

        coffee::BufferConfiguration stagingBufferConfiguration {};
        stagingBufferConfiguration.usage = coffee::BufferUsage::TransferSource;
        stagingBufferConfiguration.properties = coffee::MemoryProperty::HostVisible | coffee::MemoryProperty::HostCoherent;
        stagingBufferConfiguration.instanceCount = 1U;
        stagingBufferConfiguration.instanceSize = bytesPerPixel * width * height;

        coffee::Buffer staging = engine.createBuffer(stagingBufferConfiguration);
        staging->write(fontPixels, bytesPerPixel * width * height);

        engine.copyBufferToImage(fonts, staging);
    }

    void ImGuiSystem::createDescriptors() {
        std::map<uint32_t, coffee::DescriptorBindingInfo> bindings {};
        coffee::DescriptorBindingInfo binding {};

        binding.type = coffee::DescriptorType::ImageAndSampler;
        binding.stages = coffee::ShaderStage::Fragment;
        bindings[0] = binding;

        layout =
            engine.createDescriptorLayout(bindings);
        descriptorSet =
            engine.createDescriptorSet(coffee::DescriptorWriter(layout).addImage(0, coffee::ResourceState::ShaderResource, fonts, fontsSampler));
    }

    void ImGuiSystem::createRenderPass() {
        coffee::RenderPassConfiguration renderPassConfiguration {};

        auto& colorAttachment = renderPassConfiguration.colorAttachments.emplace_back();
        colorAttachment.sampleCount = 1U;
        colorAttachment.initialState = coffee::ResourceState::Undefined;
        colorAttachment.finalState = coffee::ResourceState::Present;
        colorAttachment.format = engine.getColorFormat();
        colorAttachment.loadOp = coffee::AttachmentLoadOp::Clear;
        colorAttachment.storeOp = coffee::AttachmentStoreOp::Store;
        colorAttachment.stencilLoadOp = coffee::AttachmentLoadOp::DontCare;
        colorAttachment.stencilStoreOp = coffee::AttachmentStoreOp::DontCare;
        colorAttachment.clearValue = std::array<float, 4> { 0.01f, 0.01f, 0.01f, 1.0f };

        // Interface will be used by ImGUI
        renderPass = engine.createRenderPass(renderPassConfiguration);
    }

    void ImGuiSystem::createPipeline() {
        coffee::PushConstants pushConstants {};
        coffee::ShaderProgram program {};

        pushConstants
            .addRange(coffee::ShaderStage::Vertex)
            .addObject<ImGuiPushConstant>();

        program
            .addVertexShader(engine.createShader(imguiVertexShader, coffee::ShaderStage::Vertex))
            .addFragmentShader(engine.createShader(imguiFragmentShader, coffee::ShaderStage::Fragment));

        coffee::PipelineConfiguration configuration {};

        configuration.rasterizationInfo.frontFace = coffee::FrontFace::CounterClockwise;

        configuration.colorBlendAttachment.blendEnable = true;
        configuration.colorBlendAttachment.srcBlend = coffee::BlendFactor::SrcAlpha;
        configuration.colorBlendAttachment.dstBlend = coffee::BlendFactor::OneMinusSrcAlpha;
        configuration.colorBlendAttachment.blendOp = coffee::BlendOp::Add;
        configuration.colorBlendAttachment.alphaSrcBlend = coffee::BlendFactor::One;
        configuration.colorBlendAttachment.alphaDstBlend = coffee::BlendFactor::OneMinusSrcAlpha;
        configuration.colorBlendAttachment.alphaBlendOp = coffee::BlendOp::Add;

        configuration.depthStencilInfo.depthTestEnable = false;
        configuration.depthStencilInfo.depthWriteEnable = false;
        configuration.depthStencilInfo.depthCompareOp = coffee::CompareOp::Never;

        configuration.inputBindings.push_back({ 0U, sizeof(ImDrawVert), coffee::InputRate::PerVertex, getElementDescriptions() });

        pipeline = engine.createPipeline(renderPass, pushConstants, { layout }, program, configuration);
    }

    void ImGuiSystem::createFramebuffers() {
        const auto& presentImages = engine.getPresentImages();
        framebuffers.resize(presentImages.size());

        for (size_t i = 0; i < presentImages.size(); i++) {
            coffee::FramebufferConfiguration framebufferConfiguration {};
            framebufferConfiguration.width = engine.getFramebufferWidth();
            framebufferConfiguration.height = engine.getFramebufferHeight();
            framebufferConfiguration.colorViews.push_back(presentImages[i]);
            framebuffers[i] = engine.createFramebuffer(renderPass, framebufferConfiguration);
        }
    }

    void ImGuiSystem::updateMouse() {
        ImGuiIO& io = ImGui::GetIO();

        if (engine.getCursorState() == coffee::CursorState::Disabled) {
            io.AddMousePosEvent(-FLT_MAX, -FLT_MAX);
            return;
        }

        if (engine.isWindowFocused() && io.WantSetMousePos) {
            engine.setCursorPosition(io.MousePos.x, io.MousePos.y);
        }
    }

    void ImGuiSystem::updateCursor() {
        ImGuiIO& io = ImGui::GetIO();

        if ((io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange) || engine.getCursorState() == coffee::CursorState::Disabled) {
            return;
        }

        ImGuiMouseCursor cursor = ImGui::GetMouseCursor();

        if (cursor == ImGuiMouseCursor_None || io.MouseDrawCursor) {
            engine.hideCursor();
            return;
        }

        engine.showCursor();
    }

    void ImGuiSystem::prepareImGui() {
        ImGui::NewFrame();

        {
            ImGui::SetNextWindowSize({ static_cast<float>(engine.getFramebufferWidth()), static_cast<float>(engine.getFramebufferHeight()) });
            ImGui::SetNextWindowPos({ 0.0f, 0.0f });

            ImGui::Begin("Hello world!", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove);

            ImGui::Text("Hello world!");

            ImGui::SliderFloat("Framerate Limiter", &slider, 60.0f, 240.0f);
            ImGui::ColorEdit3("Clear Color", reinterpret_cast<float*>(&clearColor));

            if (ImGui::Button("Apply new frame rate limit")) {
                engine.setFrameLimit(slider);
            }

            ImGui::SameLine();
            if (ImGui::Button("Change to FIFO")) {
                engine.changePresentMode(coffee::PresentMode::FIFO);
            }

            ImGui::SameLine();
            if (ImGui::Button("Change to Immediate")) {
                engine.changePresentMode(coffee::PresentMode::Immediate);
            }

            ImGuiIO& io = ImGui::GetIO();
            ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / io.Framerate, io.Framerate);

            if (framebufferImage != nullptr) {
                ImVec2 viewportPanelSize = ImGui::GetContentRegionAvail();
                ImGui::Image(reinterpret_cast<void*>(&framebufferImage), viewportPanelSize);
            }

            ImGui::End();
        }

        ImGui::Render();
    }

}