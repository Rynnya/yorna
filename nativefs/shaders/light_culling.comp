#version 450

#include "frustum.glsl"
#include "light_objects.glsl"

layout (constant_id = 0) const uint MAX_AMOUNT_OF_POINT_LIGHTS = 64;
layout (constant_id = 1) const uint MAX_AMOUNT_OF_SPOT_LIGHTS = 32;

layout (local_size_x = FRUSTUM_BLOCK_SIZE, local_size_y = FRUSTUM_BLOCK_SIZE, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform sampler2D depthTexture;
layout (set = 0, binding = 1, std430) readonly buffer InputFrustums { Frustum inFrustums[]; };
layout (set = 0, binding = 2) uniform InputPointLights { PointLight pointLights[MAX_AMOUNT_OF_POINT_LIGHTS]; };
layout (set = 0, binding = 3) uniform InputSpotLights { SpotLight spotLights[MAX_AMOUNT_OF_SPOT_LIGHTS]; };

layout (set = 0, binding = 4) writeonly buffer OutputIndexCounters {
    uint pointLightIndexCounter;
    uint spotLightIndexCounter;
};

layout (set = 0, binding = 5) writeonly buffer OutputPointLightIndexList { uint pointLightIndexList[]; };
layout (set = 0, binding = 6) writeonly buffer OutputSpotLightIndexList { uint spotLightIndexList[]; };
layout (set = 0, binding = 7, rg32ui) uniform writeonly uimage2D pointLightGrid;
layout (set = 0, binding = 8, rg32ui) uniform writeonly uimage2D spotLightGrid;

layout (push_constant) uniform Push {
    mat4 inverseProjection;
    mat4 viewMatrix;
} push;

shared uint gMinDepth;
shared uint gMaxDepth;

shared Frustum gGroupFrustum;

shared uint gOpaquePointLightCount;
shared uint gOpaquePointLightStartOffset;
shared uint gOpaquePointLightList[MAX_AMOUNT_OF_POINT_LIGHTS];
shared uint gOpaqueSpotLightCount;
shared uint gOpaqueSpotLightStartOffset;
shared uint gOpaqueSpotLightList[MAX_AMOUNT_OF_SPOT_LIGHTS];

void appendOpaquePointLight(uint lightIndex) {
    uint index = atomicAdd(gOpaquePointLightCount, 1);
    
    if (index < MAX_AMOUNT_OF_POINT_LIGHTS) {
        gOpaquePointLightList[index] = lightIndex;
    }
}

void appendOpaqueSpotLight(uint lightIndex) {
    uint index = atomicAdd(gOpaqueSpotLightCount, 1);
    
    if (index < MAX_AMOUNT_OF_SPOT_LIGHTS) {
        gOpaqueSpotLightList[index] = lightIndex;
    }
}

void main() {
    float floatDepth = texelFetch(depthTexture, ivec2(gl_GlobalInvocationID.xy), 0).r;
    uint unsignedDepth = floatBitsToUint(floatDepth);

    if (gl_LocalInvocationIndex == 0) {
        gMinDepth = 0x7F7FFFFF;
        gMaxDepth = 0;
        gOpaquePointLightCount = 0;
        gOpaqueSpotLightCount = 0;
        gGroupFrustum = inFrustums[gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x];
    }

    barrier();

    // float atomicMin and atomicMax requires shader_atomic_float2 extension
    atomicMin(gMinDepth, unsignedDepth);
    atomicMax(gMaxDepth, unsignedDepth);

    barrier();

    float minDepth = uintBitsToFloat(gMinDepth);
    float maxDepth = uintBitsToFloat(gMaxDepth);

    float minDepthViewSpace = clipToView(push.inverseProjection, vec4(0.0, 0.0, minDepth, 1.0)).z;
    float maxDepthViewSpace = clipToView(push.inverseProjection, vec4(0.0, 0.0, maxDepth, 1.0)).z;
    float nearClipViewSpace = clipToView(push.inverseProjection, vec4(0.0, 0.0, 0.0, 1.0)).z;

    Plane minPlane = { vec3(0.0, 0.0, -1.0), -minDepthViewSpace };

    for (uint i = gl_LocalInvocationIndex; i < MAX_AMOUNT_OF_POINT_LIGHTS; i += FRUSTUM_BLOCK_SIZE * FRUSTUM_BLOCK_SIZE) {
        PointLight light = pointLights[i];

        // Check if radius is larger than 0, otherwise discard
        if (light.radius > 0.0) {
            vec3 positionViewSpace = vec3(push.viewMatrix * vec4(light.position, 1.0));
            Sphere sphere = { positionViewSpace, light.radius };

            if (sphereInsideFrustum(gGroupFrustum, sphere, nearClipViewSpace, maxDepthViewSpace)) {
                // appendTransparentPointLight(i);

                if (!sphereInsidePlane(minPlane, sphere)) {
                    appendOpaquePointLight(i);
                }
            }
        }
    }

    for (uint i = gl_LocalInvocationIndex; i < MAX_AMOUNT_OF_SPOT_LIGHTS; i += FRUSTUM_BLOCK_SIZE * FRUSTUM_BLOCK_SIZE) {
        SpotLight light = spotLights[i];

        // Check if radius is larger than 0, otherwise discard
        if (light.radius > 0.0) {
            vec3 positionViewSpace = vec3(push.viewMatrix * vec4(light.position, 1.0));
            vec3 directionViewSpace = vec3(push.viewMatrix * vec4(normalize(light.coneDirection), 0.0));
            float coneRadius = tan(radians(light.coneAngle)) * light.radius;
            Cone cone = { positionViewSpace, light.radius, directionViewSpace, coneRadius };

            if (coneInsideFrustum(gGroupFrustum, cone, nearClipViewSpace, maxDepthViewSpace)) {
                // appendTransparentSpotLight(i);

                if (!coneInsidePlane(minPlane, cone)) {
                    appendOpaqueSpotLight(i);
                }
            }
        }
    }

    barrier();

    if (gl_LocalInvocationIndex == 0) {
        gOpaquePointLightStartOffset = atomicAdd(pointLightIndexCounter, gOpaquePointLightCount);
        imageStore(pointLightGrid, ivec2(gl_WorkGroupID.xy), uvec4(gOpaquePointLightStartOffset, gOpaquePointLightCount, 0, 0));

        gOpaqueSpotLightStartOffset = atomicAdd(spotLightIndexCounter, gOpaqueSpotLightCount);
        imageStore(spotLightGrid, ivec2(gl_WorkGroupID.xy), uvec4(gOpaqueSpotLightStartOffset, gOpaqueSpotLightCount, 0, 0));
    }

    barrier();

    for (uint i = gl_LocalInvocationIndex; i < gOpaquePointLightCount; i += FRUSTUM_BLOCK_SIZE * FRUSTUM_BLOCK_SIZE) {
        pointLightIndexList[gOpaquePointLightStartOffset + i] = gOpaquePointLightList[i];
    }

    for (uint i = gl_LocalInvocationIndex; i < gOpaqueSpotLightCount; i += FRUSTUM_BLOCK_SIZE * FRUSTUM_BLOCK_SIZE) {
        spotLightIndexList[gOpaqueSpotLightStartOffset + i] = gOpaqueSpotLightList[i];
    }
}